unit uDmCliente;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Datasnap.DBClient,
  Datasnap.Provider, Data.DB, Data.SqlExpr, uDmConexao, uClienteModel;

type
  TdmCliente = class(TDataModule)
    sqlPesquisar: TSQLDataSet;
    sqlAlterar: TSQLDataSet;
    sqlInserir: TSQLDataSet;
    sqlExcluir: TSQLDataSet;
    dspPesquisar: TDataSetProvider;
    cdsPesquisar: TClientDataSet;
    cdsPesquisarID_CLIENTE: TIntegerField;
    cdsPesquisarNOME: TStringField;
    cdsPesquisarTELEFONE: TStringField;
  private
    { Private declarations }
  public
    { Public declarations }
    function GerarID: Integer;
    procedure Pesquisar(sNome: string);
    procedure CarregarCliente(oCliente: TCliente; iCodigo: Integer);
    function Inserir(oCliente: TCliente; out sErro: string): Boolean;
    function Alterar(oCliente: TCliente; out sErro: string): Boolean;
    function Excluir(iCodigo: Integer; out sErro: string): Boolean;
  end;

var
  dmCliente: TdmCliente;

implementation

{ %CLASSGROUP 'Vcl.Controls.TControl' }

{$R *.dfm}
{ TdmCliente }

function TdmCliente.Alterar(oCliente: TCliente; out sErro: string): Boolean;
begin
  with sqlAlterar, oCliente do
  begin
    Params[0].AsString := Nome;
    Params[1].AsString := Tipo;
    Params[2].AsString := Documento;
    Params[3].AsString := Telefone;
    Params[4].AsInteger := ID;

    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao alterar cliente: ' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;
  end;
end;

procedure TdmCliente.CarregarCliente(oCliente: TCliente; iCodigo: Integer);
var
  sqlCliente: TSQLDataSet;
begin
  sqlCliente := TSQLDataSet.Create(Nil);
  try
    with sqlCliente do
    begin
      SQLConnection := DmConexao.sqlConexao;
      CommandText := 'SELECT * FROM CLIENTES WHERE (ID_CLIENTE = ' +
        IntToStr(iCodigo) + ')';
      with oCliente do
      begin
        ID := FieldByName('ID_CLIENTE').AsInteger;
        Nome := FieldByName('NOME').AsString;
        Tipo := FieldByName('TIPO').AsString;
        Documento := FieldByName('DOCUMENTO').AsString;
        Telefone := FieldByName('TELEFONE').AsString;
      end;
    end;
  finally
    FreeAndNil(sqlCliente);
  end;
end;

function TdmCliente.Excluir(iCodigo: Integer; out sErro: string): Boolean;
begin
  with sqlExcluir do
  begin
    Params[0].AsInteger := iCodigo;

    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao excluir o cliente: ' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;
  end;
end;

function TdmCliente.GerarID: Integer;
var
  sqlSequencia: TSQLDataSet;
begin
  sqlSequencia := TSQLDataSet.Create(nil);
  try
    with sqlSequencia do
    begin
      SQLConnection := DmConexao.sqlConexao;
      CommandText := 'SELECT COALESCE(MAX(ID_CLIENTE), 0) + 1 as seq from clientes';
      Open;
      Result := FieldByName('seq').AsInteger;
    end;
  finally
    sqlSequencia.Free;
  end;
end;

function TdmCliente.Inserir(oCliente: TCliente; out sErro: string): Boolean;
begin
  with sqlInserir, oCliente do
  begin
    Params[0].AsInteger := GerarID;
    Params[1].AsString := Nome;
    Params[2].AsString := Tipo;
    Params[3].AsString := Documento;
    Params[4].AsString := Telefone;

    try
      ExecSQL();
      Result := True;
    except
      on E: Exception do
      begin
        sErro := 'Ocorreu um erro ao inserir cliente: ' + sLineBreak +
          E.Message;
        Result := False;
      end;
    end;
  end;
end;

procedure TdmCliente.Pesquisar(sNome: string);
begin
  if cdsPesquisar.Active then
    cdsPesquisar.Close;

  cdsPesquisar.Params[0].AsString := '%' + sNome + '%';
  cdsPesquisar.Open;
  cdsPesquisar.First;
end;

end.
